"use strict";const SAVED_STOPWATCHES="save_stopwatches",SETTING_STOPWATCH_TRACKER_NAME="stopwatch_tracker_name",SETTING_ALLOW_NAMES="allow_names",SETTING_IMMEDIATELY_SAVE="immediate_save",SETTING_AUTOSTART="auto_start_stopwatch",SETTING_SHOW_ALERTS="show_alerts";function msToHMS(t){let e=t/1e3;const s=Math.floor(e/3600);e%=3600;const a=Math.floor(e/60);return e=Math.floor(e%60),[s,a,e]}function saveStopwatches(t){plugin.storage.setItem(SAVED_STOPWATCHES,JSON.stringify(t))}class Stopwatch{name;time_elapsed;is_running;currently_saved_millisec;after_stop;last_unpause_time;timer;constructor(t="",e=null){this.name=t,this.time_elapsed=PetiteVue.reactive({value:0}),this.is_running=!1,this.currently_saved_millisec=0,this.after_stop=Array.isArray(e)?e:[]}toString(){return`Stopwatch (${this.is_running}): => ${this.last_unpause_time}, ${this.currently_saved_millisec}`}get milliseconds(){const t=new Date;return(this.last_unpause_time&&t-this.last_unpause_time>=1e3?t-this.last_unpause_time:0)+this.currently_saved_millisec}get time(){return msToHMS(this.milliseconds)}get formattedTime(){const[t,e,s]=this.time.map((t=>String(t).padStart(2,"0")));return`${t}:${e}:${s}`}get running(){return this.is_running}get running_text(){return"Pause"}get not_running_text(){return 0==this.time_elapsed.value?"Start":"Resume"}get clear_text(){return"Clear"}get save_text(){return"Save"}get reactive_formattedTime(){return this.time_elapsed.value,this.formattedTime}pause(){const t=new Date;clearInterval(this.timer),this.currently_saved_millisec+=t-this.last_unpause_time,this.last_unpause_time=t,this.is_running=!1}resume(){this.last_unpause_time=new Date,this.is_running=!0,this.timer=setInterval((()=>{this.time_elapsed.value+=500}),500)}toggle(){this.is_running?this.pause():this.resume()}}const plugin=new NomiePlugin({name:"Stopwatch",emoji:"⏱",description:"Run a simple stopwatch based on your trackers",uses:["createNote","onLaunch","selectTrackables"],version:"0.6.1",addToCaptureMenu:!0,addToMoreMenu:!0,addToWidgets:!0}),content={current_stopwatches:[],debug:!1,settings_open:!1,settings:{will_use_name:{title:"Allow Naming Stopwatches",storage_name:"allow_names",value:!1},save_note_immediately:{title:"Save Notes Immediately",storage_name:"immediate_save",value:!1},stopwatch_auto_start:{title:"Auto Start Stopwatches",storage_name:SETTING_AUTOSTART,value:!1},show_alerts:{title:"Show General Alerts",storage_name:"show_alerts",value:!0}},stopwatch_name:{title:"Default Stopwatch",storage_name:"stopwatch_tracker_name",value:"#stopwatch"},tryRunAlert(t,e){this.settings.show_alerts.value&&plugin.alert(t,e)},debugLog(...t){console.log(...t)},initSettings(){for(const t in this.settings)this.settings[t].value=plugin.storage.getItem(this.settings[t].storage_name)??this.settings[t].value},checkedAction(t,e){if("number"==typeof t){const s=t;if(this.current_stopwatches[s]){e(this.current_stopwatches[s],s)}else this.tryRunAlert("Invalid stopwatch index",`Expected a number between 0 and ${this.current_stopwatches.length-1} (inclusive); got this instead: ${s}!`)}else if("object"==typeof t){const s=t,a=this.current_stopwatches.indexOf(s);a>-1?e(s,a):this.tryRunAlert("Invalid stopwatch","Expected an active stopwatch!")}},toggleSettingSave(t){plugin.storage.setItem(t.storage_name,t.value),this.tryRunAlert(`${t.title} Changed`,`Setting change to ${t.value}.`)},stopwatchClassStyle:t=>t.running,async mounted(){plugin.onRegistered((async()=>{await plugin.storage.init(),this.debugLog(plugin.storage.getItem(SAVED_STOPWATCHES)),this.debugLog(JSON.parse(plugin.storage.getItem(SAVED_STOPWATCHES))),this.current_stopwatches=JSON.parse(plugin.storage.getItem(SAVED_STOPWATCHES))||[],this.stopwatch_name.value=plugin.storage.getItem("stopwatch_tracker_name")??"#stopwatch",this.initSettings(),this.tryRunAlert("Plugin Initialized","Stopwatch plugin now registered and ready to use!")}))},async stopwatch_add_new(t){let e="";if(this.settings.will_use_name.value){const t=this.debug?{value:"Debug Stopwatch Name Test"}:await plugin.prompt("Name Stopwatch","What do you want to name your stopwatch?");t.value&&(e=t.value)}let s=null;if(t){const t=(this.debug?{}:await plugin.selectTrackables(null,!0)).map((t=>t.tracker&&"timer"===t.tracker.type?t.tracker.include.split(" ").map((t=>t.startsWith("#")||t.startsWith("@")||t.startsWith("+")?t.split("(",1)[0]:t.id)):t.id)).flat();this.debugLog(t),s=new Stopwatch(e,t)}else s=new Stopwatch(e);this.current_stopwatches.push(s),this.settings.stopwatch_auto_start.value&&s.resume(),this.tryRunAlert(`New ${t?"Specific":"Custom"} Stopwatch created`,`A new stopwatch with name ${e} has been created!`),saveStopwatches(this.current_stopwatches)},stopwatch_clear(t){this.checkedAction(t,(async(t,e)=>{(this.debug?{value:!0}:await plugin.confirm("Are you sure you want to delete this stopwatch?","You will not be able recovery it.")).value&&(this.current_stopwatches.splice(e,1),this.tryRunAlert("Stopwatch Deleted!","The stopwatch has been deleted."))})),saveStopwatches(this.current_stopwatches)},stopwatch_save(t){this.checkedAction(t,(async(t,e)=>{let s=[];for(const e of t.after_stop){let t=this.debug?{note:"#DEBUG"}:await plugin.getTrackableInput(e);this.debugLog(e,t),s.push(t)}const a=t.name?` from ${t.name},`:"",i=" "+s.map((t=>t.note)).join(" "),n={note:`${this.stopwatch_name.value}(${t.formattedTime})${a}${i}`,score:0};this.current_stopwatches.splice(e,1),this.settings.save_note_immediately.value?plugin.createNote(n):plugin.openNoteEditor(n)})),saveStopwatches(this.current_stopwatches)},toggleSettingsPage(){this.settings_open=!this.settings_open},async changeStopwatchTrackerName(){let t=this.debug?{res:this.stopwatch_name.value+"!"}:await plugin.prompt("Stopwatch Tracker Name Change","What would you like the stopwatch tracker name to be called? (defaults to #stopwatch)");t.value&&(this.stopwatch_name.value=t.value||"#stopwatch","string"==typeof this.stopwatch_name.value&&(this.stopwatch_name.value=this.stopwatch_name.value.startsWith("#")?this.stopwatch_name.value:"#"+this.stopwatch_name.value),plugin.storage.setItem("stopwatch_tracker_name",this.stopwatch_name.value))}};PetiteVue.createApp(content).mount("#content");